quarkus.application.name=dependent-service

quarkus.grpc.clients.greeter.host=grpc-service
quarkus.grpc.clients.streaming.host=grpc-service

# Swagger UI for OpenAPI
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.theme=original

# Base Path Prefix Config
quarkus.resteasy-reactive.path=/dependent
%dev.quarkus.resteasy-reactive.path=/
%test.quarkus.resteasy-reactive.path=/

# Unreliable Service API Client Config
quarkus.rest-client.unreliable-api.url=http://gateway/unreliable
quarkus.rest-client.unreliable-api.scope=javax.inject.Singleton

# Database Config
# configure your datasource
%prod.quarkus.datasource.db-kind = postgresql
%prod.quarkus.datasource.username = admin
%prod.quarkus.datasource.password = password
%prod.quarkus.datasource.reactive.url = vertx-reactive:postgresql://dependent-service-db:5432/database
# drop and create the database at startup (use `update` to only update the schema)
%prod.quarkus.hibernate-orm.database.generation = drop-and-create

# Send Geolocation Requests to Kafka
mp.messaging.outgoing.geocoding-request.topic=kafka-geocoding-request-topic
mp.messaging.outgoing.geocoding-request.connector=smallrye-kafka
mp.messaging.outgoing.geocoding-request.value.serializer=de.fhe.ai.mc.model.util.GeocodingResultSerializer
mp.messaging.outgoing.geocoding-request.auto.offset.reset=earliest
mp.messaging.outgoing.geocoding-request.health-readiness-enabled=false

# Receive Geolocation Responses from Kafka
mp.messaging.incoming.kafka-geocoding-response-topic.connector=smallrye-kafka
mp.messaging.incoming.kafka-geocoding-response-topic.value.deserializer=de.fhe.ai.mc.model.util.GeocodingResultDeserializer
mp.messaging.incoming.kafka-geocoding-response-topic.auto.offset.reset=earliest
mp.messaging.incoming.kafka-geocoding-response-topic.health-readiness-enabled=false