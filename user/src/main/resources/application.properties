quarkus.application.name=user

# Base Path Prefix Config
quarkus.resteasy-reactive.path=/user
%dev.quarkus.resteasy-reactive.path=/
%test.quarkus.resteasy-reactive.path=/

# JDBC datasoruce
quarkus.datasource.db-kind=h2
quarkus.datasource.username=username
quarkus.datasource.jdbc.url=jdbc:h2:mem:user_db;DB_CLOSE_DELAY=-1
quarkus.datasource.jdbc.max-size=5
quarkus.hibernate-orm.database.generation=drop-and-create


#Consume User Registered Request
mp.messaging.incoming.user-registration-response.topic=kafka-user-registration-request-topic
mp.messaging.incoming.user-registration-response.connector=smallrye-kafka
mp.messaging.incoming.user-registration-response.group.id=user-service-group
mp.messaging.incoming.user-registration-response.value.deserializer=de.fhe.adoptapal.mapper.UserResultDeserializer
mp.messaging.incoming.user-registration-response.auto.offset.reset=earliest
mp.messaging.incoming.user-registration-response.health-readiness-enabled=false

#Consume User Deletion Request
mp.messaging.incoming.user-deletion-response.topic=kafka-user-deletion-request-topic
mp.messaging.incoming.user-deletion-response.connector=smallrye-kafka
mp.messaging.incoming.user-deletion-response.group.id=user-service-group
mp.messaging.incoming.user-deletion-response.value.deserializer=de.fhe.adoptapal.mapper.UserDeletionResultDeserializer
mp.messaging.incoming.user-deletion-response.auto.offset.reset=earliest
mp.messaging.incoming.user-deletion-response.health-readiness-enabled=false

# Send User Created Requests to Kafka
mp.messaging.outgoing.user-creation-request.topic=kafka-user-creation-request-topic
mp.messaging.outgoing.user-creation-request.connector=smallrye-kafka
mp.messaging.outgoing.user-creation-request.value.serializer=de.fhe.adoptapal.mapper.UserResultSerializer
mp.messaging.outgoing.user-creation-request.auto.offset.reset=earliest
mp.messaging.outgoing.user-creation-request.health-readiness-enabled=false
mp.messaging.outgoing.user-creation-request.merge=true

# Send User Updated Requests to Kafka
mp.messaging.outgoing.user-update-request.topic=kafka-user-update-request-topic
mp.messaging.outgoing.user-update-request.connector=smallrye-kafka
mp.messaging.outgoing.user-update-request.value.serializer=de.fhe.adoptapal.mapper.UserResultSerializer
mp.messaging.outgoing.user-update-request.auto.offset.reset=earliest
mp.messaging.outgoing.user-update-request.health-readiness-enabled=false
mp.messaging.outgoing.user-update-request.merge=true

#Send User Registered Acks
mp.messaging.outgoing.user-registration-ack-request.topic=kafka-user-registration-request-ack-topic
mp.messaging.outgoing.user-registration-ack-request.connector=smallrye-kafka
mp.messaging.outgoing.user-registration-ack-request.value.serializer=de.fhe.adoptapal.mapper.UserCreationAckSerializer
mp.messaging.outgoing.user-registration-ack-request.auto.offset.reset=earliest
mp.messaging.outgoing.user-registration-ack-request.health-readiness-enabled=false


#test
#Set the bootstrap server address
#kafka.bootstrap.servers=localhost:9092

#Set the Connector to use for the producer, topic and serializer
mp.messaging.outgoing.post-out.connector=smallrye-kafka
mp.messaging.outgoing.post-out.topic=post
mp.messaging.outgoing.post-out.value.serializer=io.quarkus.kafka.client.serialization.ObjectMapperSerializer
#quarkus.http.port=8081