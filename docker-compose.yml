version: "3.8"

########################################################
# Volume Definition
########################################################
volumes:
  dependent-service-db-data:

services:
  ########################################################
  # Reverse Proxy / Traefik
  # Renamed service to `gateway` - more appropriate for
  # its tasks
  ########################################################
  gateway:
    image: "traefik:v2.9"
    command:
      - --entrypoints.web.address=:80
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --api.dashboard=true
      - --metrics.prometheus=true
      - --tracing=true
      - --tracing.servicename=gateway
      - --tracing.jaeger=true
      - --tracing.jaeger.samplingserverurl=http://jaeger:5778/sampling
      - --tracing.jaeger.localagenthostport=jaeger:6831
      - --tracing.jaeger.collector.endpoint=http://jaeger:14268/api/traces?format=jaeger.thrift
    ports:
      - "80:80"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`localhost`) && (PathPrefix(`/api`, `/dashboard`))"
      - "traefik.http.routers.dashboard.service=api@internal"
      # Note: when used in docker-compose.yml all dollar signs in the hash need to be doubled for escaping.
      # To create user:password pair, it's possible to use this command:
      # echo $(htpasswd -nB user) | sed -e s/\\$/\\$\\$/g
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$2y$$05$$T5wxz7ToYKKPu6a.GZzyiuy0TJlh1LFytQ5NqSChdZLf.JeccxI3u"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth@docker"

  zookeeper:
    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    ports:
      - "2181:2181"
    environment:
      LOG_DIR: /tmp/logs

  kafka:
    image: quay.io/strimzi/kafka:0.23.0-kafka-2.8.0
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      LOG_DIR: "/tmp/logs"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://${KAFKA_SERVER}"
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181

  ########################################################
  # Auth Service
  ########################################################
  auth-service:
    build:
      context: $PWD/auth-service/
      dockerfile: $PWD/auth-service/src/main/docker/Dockerfile.jvm
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-service.rule=PathPrefix(`/auth`)"
      - "traefik.http.routers.auth-service.entrypoints=web"

  ########################################################
  # JWT Service
  ########################################################
  jwt-service:
    build:
      context: $PWD/jwt-service/
      dockerfile: $PWD/jwt-service/src/main/docker/Dockerfile.jvm
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jwt-service.rule=PathPrefix(`/jwt`)"
      - "traefik.http.routers.jwt-service.entrypoints=web"

  ########################################################
  # Unreliable Service
  ########################################################
  unreliable-service:
    build:
      context: $PWD/unreliable-service/
      dockerfile: $PWD/unreliable-service/src/main/docker/Dockerfile.jvm
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.unreliable-service.rule=PathPrefix(`/unreliable`)"
      - "traefik.http.routers.unreliable-service.entrypoints=web"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "${KAFKA_SERVER}"
    depends_on:
      - kafka

  ########################################################
  # gRPC Service
  ########################################################
  grpc-service:
    build:
      context: $PWD/grpc-service/
      dockerfile: $PWD/grpc-service/src/main/docker/Dockerfile.jvm
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grpc-service.rule=PathPrefix(`/grpc-service`)"
      - "traefik.http.routers.grpc-service.entrypoints=web"
      - "traefik.http.services.grpc-service.loadbalancer.server.port=9000"

  ########################################################
  # Dependent Service Postgres DB
  ########################################################
  dependent-service-db:
    image: postgres
    restart: always
    volumes:
      # Use the named volume to store DB data
      - dependent-service-db-data:/var/lib/postgresql/data
    ports:
      # We expose the port so that one can connect directly to this
      # DB using `localhost:5432` from your IDE or some other tool
      - "5432:5432"
    environment:
      # Postgres settings - should be used in your database connection
      # config, e.g. `application.properties` from Quarkus
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      POSTGRES_DB: database

  ########################################################
  # Dependent Service
  ########################################################
  dependent-service:
    build:
      context: $PWD/dependent-service/
      dockerfile: $PWD/dependent-service/src/main/docker/Dockerfile.jvm
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dependent-service.rule=PathPrefix(`/dependent`)"
      - "traefik.http.routers.dependent-service.entrypoints=web"

      - "traefik.http.middlewares.dependent-service-forward-auth.forwardauth.address=http://gateway/auth/login"
      - "traefik.http.routers.dependent-service.middlewares=dependent-service-forward-auth@docker"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: "${KAFKA_SERVER}"
    depends_on:
      - kafka
      - dependent-service-db
      - grpc-service